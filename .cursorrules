{
  "$schema": "https://cursor.sh/schemas/cursor-rules.json",
  "description": "This configuration file defines commands that are part of multi-step workflows. These commands are not standalone but serve as triggers for executing a sequence of actions.",
  "defaultCommand": {
    "pattern": ".*",
    "overridingPrinciples": {
      "primary": "KISS_PRINCIPLE",
      "iterationStyle": "STEP_BY_STEP",
      "testingRule": "TEST_EACH_TESTABLE_STEP",
      "engineeringApproach": "AVOID_OVERENGINEERING",
      "codeGeneration": "SINGLE_FILE_FOCUS",
      "modificationPolicy": "ASK_FIRST_WITH_IMPACT_ANALYSIS"
    },
    "mandatoryBehaviors": [
      "Follow KISS principle in all solutions",
      "Iterate step by step, no skipping steps",
      "Test each step that can be tested",
      "Avoid over-engineering solutions",
      "Do not auto-generate multiple files",
      "Request permission before modifying/overwriting code",
      "Provide impact analysis for all proposed changes"
    ],
    "action": "enforce",
    "severity": "error"
  },
  "commands": {
    "commit-prep": {
      "pattern": "^commit-prep(?:\\s+((?:\\/?[\\w-]+)+))?(?:\\s+(--dry-run))?$",
      "description": "Generate commit message from changes in specified directories",
      "action": "pipeline",
      "steps": [
        {
          "name": "capture-git-state",
          "execute": {
            "script": ".cursor/scripts/git/capture-state.sh",
            "args": ["$1"]
          },
          "errorHandling": {
            "invalidDirectory": {
              "match": "ERR_INVALID_DIR:",
              "response": "Error: Invalid directory path. Valid options: ${validDirs}"
            }
          }
        },
        {
          "name": "supabase-migration-check",
          "execute": ".cursor/scripts/supabase/check-migration.sh"
        },
        {
          "name": "analyze-changes",
          "ai": {
            "prompt": ".cursor/templates/git/commit-analysis.md",
            "context": {
              "files": [".idea/_gitdiff.tmp"],
              "reference": [
                "supabase/migrations/*.sql",
                "docs/commit-conventions.md"
              ]
            }
          }
        },
        {
          "name": "format-output",
          "transform": {
            "template": ".cursor/templates/git/commit-message.tpl",
            "validation": {
              "regex": "^((feat|fix|docs|style|refactor|test|chore)(\\([\\w\\/-]+\\))?: .+?)(\\n|$)",
              "onFailure": "Reformat to match Conventional Commits with multiple scopes"
            }
          }
        },
        {
          "name": "output-handling",
          "execute": {
            "script": ".cursor/scripts/output/handler.sh",
            "args": ["$2"]
          }
        }
      ],
      "hooks": {
        "preExecute": ".cursor/scripts/hooks/valid-dirs.sh",
        "postSuccess": "rm .idea/_gitdiff.tmp",
        "postFailure": "echo 'Review .idea/_gitdiff.tmp for issues'"
      }
    }
  },
  "rules": ".cursor/config/commit-rules.yaml"
}